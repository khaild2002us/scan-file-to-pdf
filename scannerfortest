using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;
using WIA;
using MySql.Data.MySqlClient;
using PdfSharp.Pdf;
using PdfSharp.Drawing;

namespace scannerfortest
{
    public partial class Form1 : Form
    {
        private List<string> scannedImages = new List<string>();

        [Obsolete]
        public Form1()
        {
            InitializeComponent();
        }

        [Obsolete]
        private void button1_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox1.Text))
            {
                MessageBox.Show("Please enter a valid NNI in the textbox before scanning.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            // Open the dialog to acquire an image
            WIA.CommonDialog dialog = new WIA.CommonDialog();
            ImageFile image = dialog.ShowAcquireImage(AlwaysSelectDevice: true);

            var deviceManager = new DeviceManager();
            foreach (DeviceInfo deviceInfo in deviceManager.DeviceInfos)
            {
                if (deviceInfo.Type == WiaDeviceType.ScannerDeviceType)
                {
                    Console.WriteLine(deviceInfo.Properties["Name"].get_Value());
                }
            }

            if (image != null)
            {
                // Create a unique path for the scanned image
                string path = Path.Combine(@"C:\scanner\", textBox1.Text+ tabControl1.SelectedTab.Text + ".jpg") ;
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
                image.SaveFile(path);
                scannedImages.Add(path);

                // Display the scanned image in the selected tab's PictureBox
                PictureBox pictureBox = tabControl1.SelectedTab.Controls.OfType<PictureBox>().FirstOrDefault();
                if (pictureBox != null)
                {
                    pictureBox.Image = Image.FromFile(path);
                }
                                // Add the path to the scanned images list
                scannedImages.Add(path);
            }
        }
                private void button2_Click_1(object sender, EventArgs e)
        {
                 if (string.IsNullOrEmpty(textBox1.Text))
            {
                MessageBox.Show("Please enter a valid NNI in the textbox before scanning.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            // Create a PDF from the scanned images
                        string pdfPath = Path.Combine(@"C:\scanner\", textBox1.Text + "-" + DateTime.Today.Day +"-" + DateTime.Today.Month + "-" + DateTime.Today.Year + "-" + ".pdf") ;
            if (File.Exists(pdfPath))
            {
                File.Delete(pdfPath);
            }
                        
            CreatePdfFromImages(scannedImages, pdfPath);

            // Save the PDF to the database
            SavePdfToDatabase(pdfPath);
        }

        private void CreatePdfFromImages(List<string> imagePaths, string outputPdfPath)
        {
            PdfDocument pdfDocument = new PdfDocument();

            foreach (var imagePath in imagePaths)
            {
                PdfPage pdfPage = pdfDocument.AddPage();
                XGraphics gfx = XGraphics.FromPdfPage(pdfPage);
                XImage xImage = XImage.FromFile(imagePath);

                pdfPage.Width = xImage.PixelWidth;
                pdfPage.Height = xImage.PixelHeight;
                gfx.DrawImage(xImage, 0, 0, pdfPage.Width, pdfPage.Height);
            }

            if (pdfDocument.PageCount == 0)
            {
                MessageBox.Show("Please scan images before creating the PDF.");
                return;
            }
            else
            {

            }

            pdfDocument.Save(outputPdfPath);
        }

        private void SavePdfToDatabase(string pdfPath)
        {
            try
            {
                string NNI=textBox1.Text;
                //if (NNI == "")
                //{
                //    "INSER NNI".ToString();
                //}



                ////byte[] pdfBytes = File.ReadAllBytes(pdfPath);
                string pdff = pdfPath; 
                if (!File.Exists(pdff))
                {
                    MessageBox.Show("PDF file does not exist. Please create the PDF before saving to the database.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                File.Exists (pdff);
               

                DateTime dateTime = DateTime.UtcNow;
                string createdOn = dateTime.ToString("yyyy-MM-dd");

                using (MySqlConnection con = new MySqlConnection("Server=localhost;Database=kmt;Uid=root;Pwd=;"))
                {
                    con.Open();

                    // ضبط max_allowed_packet
                    using (MySqlCommand cmd = new MySqlCommand("SET GLOBAL max_allowed_packet=67108864;", con))
                    {
                        cmd.ExecuteNonQuery();
                    }

                    string CmdString = "INSERT INTO demande_folders(nni, pdf_data, date_creation) " +
                                       "VALUES(@nni, @pdf_data, @date_creation)";
                    using (MySqlCommand cmd = new MySqlCommand(CmdString, con))
                    {
                        cmd.Parameters.AddWithValue("@nni", NNI) ;
                        //cmd.Parameters.AddWithValue("@pdf_data", pdfBytes);
                        cmd.Parameters.AddWithValue("@pdf_data", pdff);
                        cmd.Parameters.AddWithValue("@date_creation", createdOn);

                        int RowsAffected = cmd.ExecuteNonQuery();
                        con.Close();

                        if (RowsAffected > 0)
                        {

                            MessageBox.Show("PDF stored successfully!", "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            MessageBox.Show("Failed to store the PDF. Please contact the application vendor.", "Alert", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
